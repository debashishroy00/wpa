# Multi-stage build for MASSIVE size reduction
# Target: 14.6GB â†’ <500MB (97% reduction)

FROM python:3.11-slim as builder

WORKDIR /app

# Install only essential system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY requirements.txt .

# Create requirements-minimal.txt excluding heavy ML packages
RUN grep -v -E "(torch|nvidia|triton|faiss|tensorflow)" requirements.txt > requirements-minimal.txt || cp requirements.txt requirements-minimal.txt

# Install minimal production dependencies only
RUN pip install --user --no-cache-dir \
    --no-deps \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    sqlalchemy==2.0.23 \
    psycopg2-binary==2.9.9 \
    redis==5.0.1 \
    python-jose[cryptography]==3.3.0 \
    python-multipart==0.0.6 \
    bcrypt==4.1.1 \
    structlog==23.2.0 \
    chromadb==0.4.17 \
    sentence-transformers==2.2.2 \
    pydantic==2.5.0 \
    alembic==1.12.1 \
    python-dotenv==1.0.0

# ===== PRODUCTION STAGE (Minimal) =====
FROM python:3.11-slim

WORKDIR /app

# Install only essential runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy only the installed packages from builder
COPY --from=builder /root/.local /root/.local

# Copy application code
COPY app/ ./app/
COPY alembic/ ./alembic/
COPY alembic.ini .
COPY knowledge_base/ ./knowledge_base/

# Create vector_db directory for persistent storage
RUN mkdir -p /app/vector_db

# AGGRESSIVE cleanup to minimize size
RUN find /root/.local -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true && \
    find /root/.local -type f -name "*.pyc" -delete && \
    find /root/.local -type f -name "*.pyo" -delete && \
    find /root/.local -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true && \
    find /root/.local -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /root/.local -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    rm -rf /root/.cache /tmp/* /var/tmp/* && \
    rm -rf /root/.local/lib/python*/site-packages/*/tests/ 2>/dev/null || true

# Set PATH to use local packages
ENV PATH=/root/.local/bin:$PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]