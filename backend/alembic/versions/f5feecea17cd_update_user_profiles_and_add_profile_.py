"""update_user_profiles_and_add_profile_tables

Revision ID: f5feecea17cd
Revises: 9f325f4cdb9f
Create Date: 2025-08-20 02:02:07.265611

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f5feecea17cd'
down_revision = '9f325f4cdb9f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('family_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('relationship_type', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('income', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('retirement_savings', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('education_fund_target', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('education_fund_current', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('expected_college_year', sa.Integer(), nullable=True),
    sa.Column('requires_financial_support', sa.Boolean(), nullable=True),
    sa.Column('monthly_support_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('care_cost_estimate', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_family_members_id'), 'family_members', ['id'], unique=False)
    op.create_index(op.f('ix_family_members_profile_id'), 'family_members', ['profile_id'], unique=False)
    op.create_table('user_benefits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('benefit_type', sa.String(length=50), nullable=False),
    sa.Column('benefit_name', sa.String(length=100), nullable=True),
    sa.Column('estimated_monthly_benefit', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('full_retirement_age', sa.Integer(), nullable=True),
    sa.Column('early_retirement_reduction', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('delayed_retirement_increase', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('spouse_benefit_eligible', sa.Boolean(), nullable=True),
    sa.Column('spouse_benefit_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('pension_type', sa.String(length=50), nullable=True),
    sa.Column('vesting_schedule', sa.String(length=100), nullable=True),
    sa.Column('vested_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('expected_monthly_payout', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('lump_sum_option', sa.Boolean(), nullable=True),
    sa.Column('employer_match_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('employer_match_limit', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('health_insurance_premium', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('employer_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('benefit_start_date', sa.Date(), nullable=True),
    sa.Column('benefit_end_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_benefits_id'), 'user_benefits', ['id'], unique=False)
    op.create_index(op.f('ix_user_benefits_profile_id'), 'user_benefits', ['profile_id'], unique=False)
    op.create_table('user_tax_info',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('tax_year', sa.Integer(), nullable=False),
    sa.Column('filing_status', sa.String(length=50), nullable=True),
    sa.Column('federal_tax_bracket', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('state_tax_bracket', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('effective_tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('marginal_tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('adjusted_gross_income', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('taxable_income', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('traditional_401k_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('roth_401k_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('traditional_ira_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('roth_ira_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('hsa_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('max_401k_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('max_ira_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('max_hsa_contribution', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('standard_deduction', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('itemized_deductions', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('tax_credits', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('has_tax_professional', sa.Boolean(), nullable=True),
    sa.Column('tax_professional_name', sa.String(length=100), nullable=True),
    sa.Column('tax_strategy_notes', sa.Text(), nullable=True),
    sa.Column('estimated_quarterly_payments', sa.Boolean(), nullable=True),
    sa.Column('quarterly_payment_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['user_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_tax_info_id'), 'user_tax_info', ['id'], unique=False)
    op.create_index(op.f('ix_user_tax_info_profile_id'), 'user_tax_info', ['profile_id'], unique=False)
    op.add_column('user_profiles', sa.Column('age', sa.Integer(), nullable=True))
    op.add_column('user_profiles', sa.Column('gender', sa.String(length=20), nullable=True))
    op.add_column('user_profiles', sa.Column('marital_status', sa.String(length=50), nullable=True))
    op.add_column('user_profiles', sa.Column('state', sa.String(length=100), nullable=True))
    op.add_column('user_profiles', sa.Column('country', sa.String(length=100), nullable=True))
    op.add_column('user_profiles', sa.Column('occupation', sa.String(length=100), nullable=True))
    op.add_column('user_profiles', sa.Column('phone', sa.String(length=20), nullable=True))
    op.add_column('user_profiles', sa.Column('address', sa.Text(), nullable=True))
    op.add_column('user_profiles', sa.Column('city', sa.String(length=100), nullable=True))
    op.add_column('user_profiles', sa.Column('zip_code', sa.String(length=20), nullable=True))
    op.add_column('user_profiles', sa.Column('emergency_contact', sa.String(length=100), nullable=True))
    op.add_column('user_profiles', sa.Column('emergency_phone', sa.String(length=20), nullable=True))
    op.alter_column('user_profiles', 'date_of_birth',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('user_profiles', 'risk_tolerance',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=20),
               nullable=True)
    op.alter_column('user_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_user_profiles_user_id', table_name='user_profiles')
    op.create_index(op.f('ix_user_profiles_user_id'), 'user_profiles', ['user_id'], unique=True)
    op.drop_constraint('user_profiles_user_id_fkey', 'user_profiles', type_='foreignkey')
    op.create_foreign_key(None, 'user_profiles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('user_profiles', 'timezone')
    op.drop_column('user_profiles', 'currency')
    op.drop_column('user_profiles', 'location')
    op.drop_column('user_profiles', 'push_notifications')
    op.drop_column('user_profiles', 'data_sharing_consent')
    op.drop_column('user_profiles', 'marketing_consent')
    op.drop_column('user_profiles', 'language')
    op.drop_column('user_profiles', 'sms_notifications')
    op.drop_column('user_profiles', 'email_notifications')
    op.drop_column('user_profiles', 'investment_experience')
    op.drop_column('user_profiles', 'analytics_consent')
    op.drop_column('user_profiles', 'annual_income')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_profiles', sa.Column('annual_income', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('analytics_consent', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('investment_experience', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('email_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('sms_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('language', sa.VARCHAR(length=2), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('marketing_consent', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('data_sharing_consent', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('push_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_profiles', type_='foreignkey')
    op.create_foreign_key('user_profiles_user_id_fkey', 'user_profiles', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_user_profiles_user_id'), table_name='user_profiles')
    op.create_index('ix_user_profiles_user_id', 'user_profiles', ['user_id'], unique=False)
    op.alter_column('user_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_profiles', 'risk_tolerance',
               existing_type=sa.String(length=20),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_profiles', 'date_of_birth',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('user_profiles', 'emergency_phone')
    op.drop_column('user_profiles', 'emergency_contact')
    op.drop_column('user_profiles', 'zip_code')
    op.drop_column('user_profiles', 'city')
    op.drop_column('user_profiles', 'address')
    op.drop_column('user_profiles', 'phone')
    op.drop_column('user_profiles', 'occupation')
    op.drop_column('user_profiles', 'country')
    op.drop_column('user_profiles', 'state')
    op.drop_column('user_profiles', 'marital_status')
    op.drop_column('user_profiles', 'gender')
    op.drop_column('user_profiles', 'age')
    op.drop_index(op.f('ix_user_tax_info_profile_id'), table_name='user_tax_info')
    op.drop_index(op.f('ix_user_tax_info_id'), table_name='user_tax_info')
    op.drop_table('user_tax_info')
    op.drop_index(op.f('ix_user_benefits_profile_id'), table_name='user_benefits')
    op.drop_index(op.f('ix_user_benefits_id'), table_name='user_benefits')
    op.drop_table('user_benefits')
    op.drop_index(op.f('ix_family_members_profile_id'), table_name='family_members')
    op.drop_index(op.f('ix_family_members_id'), table_name='family_members')
    op.drop_table('family_members')
    # ### end Alembic commands ###