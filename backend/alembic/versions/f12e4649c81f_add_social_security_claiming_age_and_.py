"""Add social security claiming age and 401k fields to user benefits

Revision ID: f12e4649c81f
Revises: 0a9c004b
Create Date: 2025-09-06 17:12:24.423170

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f12e4649c81f'
down_revision = '0a9c004b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_chat_messages_id', table_name='chat_messages')
    op.drop_index('ix_chat_messages_session_id', table_name='chat_messages')
    op.drop_index('ix_chat_messages_user_id', table_name='chat_messages')
    op.drop_table('chat_messages')
    op.drop_table('intelligence_analyses')
    op.drop_index('ix_chat_sessions_id', table_name='chat_sessions')
    op.drop_index('ix_chat_sessions_session_id', table_name='chat_sessions')
    op.drop_index('ix_chat_sessions_user_id', table_name='chat_sessions')
    op.drop_table('chat_sessions')
    op.drop_index('ix_chat_intelligence_user_id_session_id', table_name='chat_intelligence')
    op.alter_column('user_benefits', 'pension_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('user_benefits', 'other_benefits',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index('ix_user_benefits_benefit_type_enhanced', table_name='user_benefits')
    op.drop_index('ix_user_benefits_social_security_claiming_age', table_name='user_benefits')
    op.alter_column('user_estate_planning', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_estate_planning', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_estate_planning_document_type', table_name='user_estate_planning')
    op.drop_index('ix_estate_planning_status', table_name='user_estate_planning')
    op.drop_index('ix_estate_planning_user_id', table_name='user_estate_planning')
    op.alter_column('user_insurance_policies', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_insurance_policies', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_insurance_policies_type', table_name='user_insurance_policies')
    op.drop_index('ix_insurance_policies_user_id', table_name='user_insurance_policies')
    op.alter_column('user_investment_preferences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_investment_preferences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.drop_index('ix_investment_preferences_risk_score', table_name='user_investment_preferences')
    op.drop_index('ix_investment_preferences_user_id', table_name='user_investment_preferences')
    op.create_index(op.f('ix_user_investment_preferences_user_id'), 'user_investment_preferences', ['user_id'], unique=True)
    op.drop_index('ix_user_tax_info_backdoor_roth_eligible', table_name='user_tax_info')
    op.drop_index('ix_user_tax_info_state_tax_rate', table_name='user_tax_info')
    op.drop_index('ix_user_tax_info_tax_year_enhanced', table_name='user_tax_info')
    op.drop_column('user_tax_info', 'state_tax_rate')
    op.drop_column('user_tax_info', 'business_income_details')
    op.drop_column('user_tax_info', 'backdoor_roth_eligible')
    op.drop_column('user_tax_info', 'tax_loss_harvesting_enabled')
    op.drop_column('user_tax_info', 'tax_planning_strategies')
    op.drop_column('user_tax_info', 'itemized_deduction_total')
    op.drop_column('user_tax_info', 'charitable_giving_annual')
    op.drop_column('user_tax_info', 'state_tax_deductions')
    op.drop_column('user_tax_info', 'mega_backdoor_roth_available')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_tax_info', sa.Column('mega_backdoor_roth_available', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('state_tax_deductions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('charitable_giving_annual', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('itemized_deduction_total', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('tax_planning_strategies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('tax_loss_harvesting_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('backdoor_roth_eligible', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('business_income_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('user_tax_info', sa.Column('state_tax_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.create_index('ix_user_tax_info_tax_year_enhanced', 'user_tax_info', ['tax_year'], unique=False)
    op.create_index('ix_user_tax_info_state_tax_rate', 'user_tax_info', ['state_tax_rate'], unique=False)
    op.create_index('ix_user_tax_info_backdoor_roth_eligible', 'user_tax_info', ['backdoor_roth_eligible'], unique=False)
    op.drop_index(op.f('ix_user_investment_preferences_user_id'), table_name='user_investment_preferences')
    op.create_index('ix_investment_preferences_user_id', 'user_investment_preferences', ['user_id'], unique=False)
    op.create_index('ix_investment_preferences_risk_score', 'user_investment_preferences', ['risk_tolerance_score'], unique=False)
    op.alter_column('user_investment_preferences', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user_investment_preferences', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_insurance_policies_user_id', 'user_insurance_policies', ['user_id'], unique=False)
    op.create_index('ix_insurance_policies_type', 'user_insurance_policies', ['policy_type'], unique=False)
    op.alter_column('user_insurance_policies', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_insurance_policies', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_estate_planning_user_id', 'user_estate_planning', ['user_id'], unique=False)
    op.create_index('ix_estate_planning_status', 'user_estate_planning', ['status'], unique=False)
    op.create_index('ix_estate_planning_document_type', 'user_estate_planning', ['document_type'], unique=False)
    op.alter_column('user_estate_planning', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_estate_planning', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_user_benefits_social_security_claiming_age', 'user_benefits', ['social_security_claiming_age'], unique=False)
    op.create_index('ix_user_benefits_benefit_type_enhanced', 'user_benefits', ['benefit_type'], unique=False)
    op.alter_column('user_benefits', 'other_benefits',
               existing_type=sa.Text(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('user_benefits', 'pension_details',
               existing_type=sa.Text(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index('ix_chat_intelligence_user_id_session_id', 'chat_intelligence', ['user_id', 'session_id'], unique=False)
    op.create_table('chat_sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('chat_sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('conversation_history', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('session_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_intent', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('message_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total_tokens_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='chat_sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chat_sessions_pkey'),
    sa.UniqueConstraint('session_id', name='chat_sessions_session_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_chat_sessions_user_id', 'chat_sessions', ['user_id'], unique=False)
    op.create_index('ix_chat_sessions_session_id', 'chat_sessions', ['session_id'], unique=False)
    op.create_index('ix_chat_sessions_id', 'chat_sessions', ['id'], unique=False)
    op.create_table('intelligence_analyses',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('overall_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success_probability', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('gaps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conflicts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scenarios', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('selected_scenario_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='intelligence_analyses_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='intelligence_analyses_pkey')
    )
    op.create_table('chat_messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('intent_detected', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('context_used', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tokens_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('model_used', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('provider', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], name='chat_messages_session_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='chat_messages_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chat_messages_pkey')
    )
    op.create_index('ix_chat_messages_user_id', 'chat_messages', ['user_id'], unique=False)
    op.create_index('ix_chat_messages_session_id', 'chat_messages', ['session_id'], unique=False)
    op.create_index('ix_chat_messages_id', 'chat_messages', ['id'], unique=False)
    # ### end Alembic commands ###