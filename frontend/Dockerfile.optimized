# Multi-stage build for MASSIVE size reduction
# Target: 1.41GB â†’ <150MB (90% reduction)

# ===== BUILD STAGE =====
FROM node:18-alpine as builder

WORKDIR /app

# Copy package files for dependency resolution
COPY package*.json ./

# Install dependencies (including devDependencies needed for build)
RUN npm ci --no-audit --no-fund

# Copy source code
COPY . .

# Build the production bundle
RUN npm run build

# ===== PRODUCTION STAGE (Minimal) =====
FROM nginx:alpine

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create minimal nginx configuration
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html index.htm; \
    \
    # Handle client-side routing \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # API proxy to backend \
    location /api/ { \
        proxy_pass http://wpa-backend:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    \
    # Static file optimization \
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
    \
    # Gzip compression \
    gzip on; \
    gzip_vary on; \
    gzip_min_length 1000; \
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; \
}' > /etc/nginx/conf.d/default.conf

# Remove default nginx config
RUN rm -rf /etc/nginx/conf.d/default.conf.dpkg-dist 2>/dev/null || true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s \
    CMD curl -f http://localhost/ || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]